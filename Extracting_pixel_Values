{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "569a99c7",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-01-15T13:45:36.415460Z",
     "iopub.status.busy": "2025-01-15T13:45:36.414959Z",
     "iopub.status.idle": "2025-01-15T13:45:38.022864Z",
     "shell.execute_reply": "2025-01-15T13:45:38.021511Z"
    },
    "papermill": {
     "duration": 1.615521,
     "end_time": "2025-01-15T13:45:38.025841",
     "exception": false,
     "start_time": "2025-01-15T13:45:36.410320",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        pass\n",
    "        \n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "595c21e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T13:45:38.033625Z",
     "iopub.status.busy": "2025-01-15T13:45:38.033147Z",
     "iopub.status.idle": "2025-01-15T13:45:38.042505Z",
     "shell.execute_reply": "2025-01-15T13:45:38.041295Z"
    },
    "papermill": {
     "duration": 0.015942,
     "end_time": "2025-01-15T13:45:38.045161",
     "exception": false,
     "start_time": "2025-01-15T13:45:38.029219",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\'\\'\\nimport os\\nimport cv2\\nimport numpy as np\\nimport pandas as pd\\n\\n# Set Kaggle-specific paths\\ninput_folder = \"/kaggle/input/faceimages/plastic face/silikon-16\"  # Change this to your Kaggle dataset directory\\nbefore_folder = os.path.join(input_folder, \"before\")\\nafter_folder = os.path.join(input_folder, \"after\")\\n\\n# Output CSV file paths (Kaggle working directory)\\neyelid_before_csv = \"/kaggle/working/before_images.csv\"\\neyelid_after_csv = \"/kaggle/working/after_images.csv\"\\n\\n# Function to process a folder of images and save pixel values to a CSV file\\ndef process_images_to_csv(image_folder, output_csv):\\n    data = []  # List to store flattened pixel data\\n    image_names = []  # List to store image file names\\n    \\n    # Iterate through all images in the folder\\n    for filename in os.listdir(image_folder):\\n        file_path = os.path.join(image_folder, filename)\\n        if os.path.isfile(file_path) and filename.endswith((\\'.png\\', \\'.jpg\\', \\'.jpeg\\')):\\n            # Read the image\\n            image = cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)  # Convert to grayscale\\n            if image is not None:\\n                # Flatten the image into a 1D array\\n                flattened = image.flatten()\\n                data.append(flattened)\\n                image_names.append(filename)\\n    \\n    # Convert to a DataFrame\\n    df = pd.DataFrame(data)\\n    df.insert(0, \"Image_Name\", image_names)  # Add a column for image names\\n    \\n    # Save to CSV\\n    df.to_csv(output_csv, index=False)\\n    print(f\"Saved CSV to {output_csv}\")\\n\\n# Process both folders\\nprocess_images_to_csv(before_folder, eyelid_before_csv)\\nprocess_images_to_csv(after_folder, eyelid_after_csv)\\n'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dummy Algorithm\n",
    "'''''\n",
    "import os\n",
    "import cv2\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "# Set Kaggle-specific paths\n",
    "input_folder = \"/kaggle/input/faceimages/plastic face/silikon-16\"  # Change this to your Kaggle dataset directory\n",
    "before_folder = os.path.join(input_folder, \"before\")\n",
    "after_folder = os.path.join(input_folder, \"after\")\n",
    "\n",
    "# Output CSV file paths (Kaggle working directory)\n",
    "eyelid_before_csv = \"/kaggle/working/before_images.csv\"\n",
    "eyelid_after_csv = \"/kaggle/working/after_images.csv\"\n",
    "\n",
    "# Function to process a folder of images and save pixel values to a CSV file\n",
    "def process_images_to_csv(image_folder, output_csv):\n",
    "    data = []  # List to store flattened pixel data\n",
    "    image_names = []  # List to store image file names\n",
    "    \n",
    "    # Iterate through all images in the folder\n",
    "    for filename in os.listdir(image_folder):\n",
    "        file_path = os.path.join(image_folder, filename)\n",
    "        if os.path.isfile(file_path) and filename.endswith(('.png', '.jpg', '.jpeg')):\n",
    "            # Read the image\n",
    "            image = cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)  # Convert to grayscale\n",
    "            if image is not None:\n",
    "                # Flatten the image into a 1D array\n",
    "                flattened = image.flatten()\n",
    "                data.append(flattened)\n",
    "                image_names.append(filename)\n",
    "    \n",
    "    # Convert to a DataFrame\n",
    "    df = pd.DataFrame(data)\n",
    "    df.insert(0, \"Image_Name\", image_names)  # Add a column for image names\n",
    "    \n",
    "    # Save to CSV\n",
    "    df.to_csv(output_csv, index=False)\n",
    "    print(f\"Saved CSV to {output_csv}\")\n",
    "\n",
    "# Process both folders\n",
    "process_images_to_csv(before_folder, eyelid_before_csv)\n",
    "process_images_to_csv(after_folder, eyelid_after_csv)\n",
    "'''\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2de37a22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T13:45:38.053113Z",
     "iopub.status.busy": "2025-01-15T13:45:38.052465Z",
     "iopub.status.idle": "2025-01-15T13:45:53.754078Z",
     "shell.execute_reply": "2025-01-15T13:45:53.752767Z"
    },
    "papermill": {
     "duration": 15.708187,
     "end_time": "2025-01-15T13:45:53.756287",
     "exception": false,
     "start_time": "2025-01-15T13:45:38.048100",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved CSV to /kaggle/working/before_images.csv\n",
      "Saved CSV to /kaggle/working/after_images.csv\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import cv2\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "# Set Kaggle-specific paths\n",
    "input_folder = \"/kaggle/input/faceimages/plastic face/blepharoplasty-eyelid-surgery-92\"  \n",
    "before_folder = os.path.join(input_folder, \"before\")\n",
    "after_folder = os.path.join(input_folder, \"after\")\n",
    "\n",
    "eyelid_before_csv = \"/kaggle/working/before_images.csv\"\n",
    "eyelid_after_csv = \"/kaggle/working/after_images.csv\"\n",
    "\n",
    "TARGET_SIZE = (92, 112)  \n",
    "\n",
    "def process_images_to_csv(image_folder, output_csv):\n",
    "    data = []  \n",
    "    image_names = []  \n",
    "    \n",
    "    # Iterate through all images in the folder\n",
    "    for filename in os.listdir(image_folder):\n",
    "        file_path = os.path.join(image_folder, filename)\n",
    "        if os.path.isfile(file_path) and filename.endswith(('.png', '.jpg', '.jpeg')):\n",
    "            # Read the image\n",
    "            image = cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)  # Convert to grayscale\n",
    "            if image is not None:\n",
    "                # Resize the image to the target size\n",
    "                resized_image = cv2.resize(image, TARGET_SIZE, interpolation=cv2.INTER_AREA)\n",
    "                # Flatten the image into a 1D array\n",
    "                flattened = resized_image.flatten()\n",
    "                data.append(flattened)\n",
    "                image_names.append(filename)\n",
    "            else:\n",
    "                print(f\"Warning: Unable to read image {filename}. Skipping.\")\n",
    "    \n",
    "    # Convert to a DataFrame\n",
    "    df = pd.DataFrame(data)\n",
    "    df.insert(0, \"Image_Name\", image_names)  # Add a column for image names\n",
    "    \n",
    "    # Replace NaN values with 0 (if any exist)\n",
    "    df.fillna(0, inplace=True)\n",
    "    \n",
    "    # Save to CSV\n",
    "    df.to_csv(output_csv, index=False)\n",
    "    print(f\"Saved CSV to {output_csv}\")\n",
    "\n",
    "# Process both folders\n",
    "process_images_to_csv(before_folder, eyelid_before_csv)\n",
    "process_images_to_csv(after_folder, eyelid_after_csv)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "104bb1cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T13:45:53.763423Z",
     "iopub.status.busy": "2025-01-15T13:45:53.763067Z",
     "iopub.status.idle": "2025-01-15T13:45:54.121767Z",
     "shell.execute_reply": "2025-01-15T13:45:54.120738Z"
    },
    "papermill": {
     "duration": 0.365105,
     "end_time": "2025-01-15T13:45:54.124211",
     "exception": false,
     "start_time": "2025-01-15T13:45:53.759106",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Image_Name</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>...</th>\n",
       "      <th>10294</th>\n",
       "      <th>10295</th>\n",
       "      <th>10296</th>\n",
       "      <th>10297</th>\n",
       "      <th>10298</th>\n",
       "      <th>10299</th>\n",
       "      <th>10300</th>\n",
       "      <th>10301</th>\n",
       "      <th>10302</th>\n",
       "      <th>10303</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>45.jpg</td>\n",
       "      <td>105</td>\n",
       "      <td>106</td>\n",
       "      <td>105</td>\n",
       "      <td>104</td>\n",
       "      <td>104</td>\n",
       "      <td>104</td>\n",
       "      <td>106</td>\n",
       "      <td>106</td>\n",
       "      <td>106</td>\n",
       "      <td>...</td>\n",
       "      <td>96</td>\n",
       "      <td>96</td>\n",
       "      <td>97</td>\n",
       "      <td>103</td>\n",
       "      <td>99</td>\n",
       "      <td>97</td>\n",
       "      <td>97</td>\n",
       "      <td>93</td>\n",
       "      <td>92</td>\n",
       "      <td>89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>56.jpg</td>\n",
       "      <td>133</td>\n",
       "      <td>133</td>\n",
       "      <td>133</td>\n",
       "      <td>133</td>\n",
       "      <td>134</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>135</td>\n",
       "      <td>...</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>13</td>\n",
       "      <td>12</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "      <td>23</td>\n",
       "      <td>46</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>89.jpg</td>\n",
       "      <td>144</td>\n",
       "      <td>150</td>\n",
       "      <td>139</td>\n",
       "      <td>144</td>\n",
       "      <td>142</td>\n",
       "      <td>147</td>\n",
       "      <td>145</td>\n",
       "      <td>141</td>\n",
       "      <td>149</td>\n",
       "      <td>...</td>\n",
       "      <td>43</td>\n",
       "      <td>21</td>\n",
       "      <td>20</td>\n",
       "      <td>28</td>\n",
       "      <td>23</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>28</td>\n",
       "      <td>33</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>20.jpg</td>\n",
       "      <td>75</td>\n",
       "      <td>78</td>\n",
       "      <td>87</td>\n",
       "      <td>96</td>\n",
       "      <td>94</td>\n",
       "      <td>91</td>\n",
       "      <td>86</td>\n",
       "      <td>90</td>\n",
       "      <td>88</td>\n",
       "      <td>...</td>\n",
       "      <td>188</td>\n",
       "      <td>187</td>\n",
       "      <td>189</td>\n",
       "      <td>176</td>\n",
       "      <td>143</td>\n",
       "      <td>117</td>\n",
       "      <td>56</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>58.jpg</td>\n",
       "      <td>44</td>\n",
       "      <td>46</td>\n",
       "      <td>46</td>\n",
       "      <td>46</td>\n",
       "      <td>45</td>\n",
       "      <td>44</td>\n",
       "      <td>44</td>\n",
       "      <td>40</td>\n",
       "      <td>36</td>\n",
       "      <td>...</td>\n",
       "      <td>232</td>\n",
       "      <td>241</td>\n",
       "      <td>245</td>\n",
       "      <td>244</td>\n",
       "      <td>242</td>\n",
       "      <td>237</td>\n",
       "      <td>235</td>\n",
       "      <td>233</td>\n",
       "      <td>235</td>\n",
       "      <td>234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>49.jpg</td>\n",
       "      <td>127</td>\n",
       "      <td>126</td>\n",
       "      <td>113</td>\n",
       "      <td>95</td>\n",
       "      <td>84</td>\n",
       "      <td>49</td>\n",
       "      <td>53</td>\n",
       "      <td>57</td>\n",
       "      <td>39</td>\n",
       "      <td>...</td>\n",
       "      <td>107</td>\n",
       "      <td>107</td>\n",
       "      <td>107</td>\n",
       "      <td>110</td>\n",
       "      <td>107</td>\n",
       "      <td>108</td>\n",
       "      <td>108</td>\n",
       "      <td>106</td>\n",
       "      <td>107</td>\n",
       "      <td>108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>66.jpg</td>\n",
       "      <td>154</td>\n",
       "      <td>162</td>\n",
       "      <td>165</td>\n",
       "      <td>166</td>\n",
       "      <td>168</td>\n",
       "      <td>169</td>\n",
       "      <td>167</td>\n",
       "      <td>163</td>\n",
       "      <td>168</td>\n",
       "      <td>...</td>\n",
       "      <td>58</td>\n",
       "      <td>24</td>\n",
       "      <td>12</td>\n",
       "      <td>15</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>2.jpg</td>\n",
       "      <td>138</td>\n",
       "      <td>139</td>\n",
       "      <td>140</td>\n",
       "      <td>142</td>\n",
       "      <td>143</td>\n",
       "      <td>144</td>\n",
       "      <td>144</td>\n",
       "      <td>145</td>\n",
       "      <td>146</td>\n",
       "      <td>...</td>\n",
       "      <td>80</td>\n",
       "      <td>82</td>\n",
       "      <td>83</td>\n",
       "      <td>84</td>\n",
       "      <td>91</td>\n",
       "      <td>93</td>\n",
       "      <td>94</td>\n",
       "      <td>102</td>\n",
       "      <td>102</td>\n",
       "      <td>104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>90.jpg</td>\n",
       "      <td>126</td>\n",
       "      <td>126</td>\n",
       "      <td>126</td>\n",
       "      <td>128</td>\n",
       "      <td>128</td>\n",
       "      <td>128</td>\n",
       "      <td>127</td>\n",
       "      <td>127</td>\n",
       "      <td>127</td>\n",
       "      <td>...</td>\n",
       "      <td>128</td>\n",
       "      <td>127</td>\n",
       "      <td>135</td>\n",
       "      <td>144</td>\n",
       "      <td>146</td>\n",
       "      <td>143</td>\n",
       "      <td>141</td>\n",
       "      <td>143</td>\n",
       "      <td>143</td>\n",
       "      <td>138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>25.jpg</td>\n",
       "      <td>197</td>\n",
       "      <td>196</td>\n",
       "      <td>199</td>\n",
       "      <td>198</td>\n",
       "      <td>197</td>\n",
       "      <td>199</td>\n",
       "      <td>200</td>\n",
       "      <td>200</td>\n",
       "      <td>200</td>\n",
       "      <td>...</td>\n",
       "      <td>175</td>\n",
       "      <td>179</td>\n",
       "      <td>177</td>\n",
       "      <td>181</td>\n",
       "      <td>177</td>\n",
       "      <td>177</td>\n",
       "      <td>176</td>\n",
       "      <td>175</td>\n",
       "      <td>174</td>\n",
       "      <td>175</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>92 rows × 10305 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Image_Name    0    1    2    3    4    5    6    7    8  ...  10294  10295  \\\n",
       "0      45.jpg  105  106  105  104  104  104  106  106  106  ...     96     96   \n",
       "1      56.jpg  133  133  133  133  134  135  135  135  135  ...     12     12   \n",
       "2      89.jpg  144  150  139  144  142  147  145  141  149  ...     43     21   \n",
       "3      20.jpg   75   78   87   96   94   91   86   90   88  ...    188    187   \n",
       "4      58.jpg   44   46   46   46   45   44   44   40   36  ...    232    241   \n",
       "..        ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...    ...    ...   \n",
       "87     49.jpg  127  126  113   95   84   49   53   57   39  ...    107    107   \n",
       "88     66.jpg  154  162  165  166  168  169  167  163  168  ...     58     24   \n",
       "89      2.jpg  138  139  140  142  143  144  144  145  146  ...     80     82   \n",
       "90     90.jpg  126  126  126  128  128  128  127  127  127  ...    128    127   \n",
       "91     25.jpg  197  196  199  198  197  199  200  200  200  ...    175    179   \n",
       "\n",
       "    10296  10297  10298  10299  10300  10301  10302  10303  \n",
       "0      97    103     99     97     97     93     92     89  \n",
       "1      13     12     14     14     16     23     46     83  \n",
       "2      20     28     23     26     26     28     33     33  \n",
       "3     189    176    143    117     56      2      1      1  \n",
       "4     245    244    242    237    235    233    235    234  \n",
       "..    ...    ...    ...    ...    ...    ...    ...    ...  \n",
       "87    107    110    107    108    108    106    107    108  \n",
       "88     12     15      9      9      9      9     11     11  \n",
       "89     83     84     91     93     94    102    102    104  \n",
       "90    135    144    146    143    141    143    143    138  \n",
       "91    177    181    177    177    176    175    174    175  \n",
       "\n",
       "[92 rows x 10305 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('/kaggle/working/after_images.csv')\n",
    "data.head(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "036a9df5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T13:45:54.131976Z",
     "iopub.status.busy": "2025-01-15T13:45:54.131586Z",
     "iopub.status.idle": "2025-01-15T13:45:54.147494Z",
     "shell.execute_reply": "2025-01-15T13:45:54.146503Z"
    },
    "papermill": {
     "duration": 0.021931,
     "end_time": "2025-01-15T13:45:54.149371",
     "exception": false,
     "start_time": "2025-01-15T13:45:54.127440",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Image_Name    0\n",
       "0             0\n",
       "1             0\n",
       "2             0\n",
       "3             0\n",
       "             ..\n",
       "10299         0\n",
       "10300         0\n",
       "10301         0\n",
       "10302         0\n",
       "10303         0\n",
       "Length: 10305, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "918ae570",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T13:45:54.157091Z",
     "iopub.status.busy": "2025-01-15T13:45:54.156693Z",
     "iopub.status.idle": "2025-01-15T13:45:57.167745Z",
     "shell.execute_reply": "2025-01-15T13:45:57.166671Z"
    },
    "papermill": {
     "duration": 3.019857,
     "end_time": "2025-01-15T13:45:57.172369",
     "exception": false,
     "start_time": "2025-01-15T13:45:54.152512",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 40.22%\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.37      0.31      0.34        45\n",
      "           1       0.43      0.49      0.46        47\n",
      "\n",
      "    accuracy                           0.40        92\n",
      "   macro avg       0.40      0.40      0.40        92\n",
      "weighted avg       0.40      0.40      0.40        92\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "\n",
    "# Load CSV files\n",
    "after_csv = \"/kaggle/working/after_images.csv\"\n",
    "before_csv = \"/kaggle/working/before_images.csv\"\n",
    "\n",
    "\n",
    "before_data = pd.read_csv(before_csv)\n",
    "after_data = pd.read_csv(after_csv)\n",
    "\n",
    "\n",
    "# Removing NAN\n",
    "before_data.dropna(inplace = True)\n",
    "after_data.dropna(inplace = True)\n",
    "\n",
    "# Assign labels (0 for before , 1 for after)\n",
    "before_data[\"Label\"] = 0\n",
    "after_data[\"Label\"] = 1\n",
    "\n",
    "# Combine data\n",
    "data = pd.concat([before_data, after_data], ignore_index=True)\n",
    "\n",
    "# Separate features and labels\n",
    "X = data.drop(columns=[\"Image_Name\", \"Label\"]).values  # Pixel values\n",
    "y = data[\"Label\"].values  # Labels\n",
    "\n",
    "# Normalize the pixel data\n",
    "scaler = StandardScaler()\n",
    "X_scaled = scaler.fit_transform(X)\n",
    "\n",
    "# Split into training and testing datasets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.5, random_state=42)\n",
    "\n",
    "\n",
    "# Apply PCA for dimensionality reduction\n",
    "pca = PCA(n_components=40)  # Adjust components as needed\n",
    "X_train_pca = pca.fit_transform(X_train)\n",
    "X_test_pca = pca.transform(X_test)\n",
    "\n",
    "\n",
    "# Train SVM classifier\n",
    "svm = SVC(kernel=\"rbf\", random_state=42)\n",
    "svm.fit(X_train_pca, y_train)\n",
    "\n",
    "# Make predictions\n",
    "y_pred = svm.predict(X_test_pca)\n",
    "\n",
    "# Evaluate the model\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f\"Accuracy: {accuracy * 100:.2f}%\")\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6267290,
     "sourceId": 10151722,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30804,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 24.653545,
   "end_time": "2025-01-15T13:45:57.909792",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-01-15T13:45:33.256247",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
