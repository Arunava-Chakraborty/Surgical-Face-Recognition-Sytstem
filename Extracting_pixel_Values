{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10151722,"sourceType":"datasetVersion","datasetId":6267290}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nimport cv2\nimport numpy as np\nimport pandas as pd\n\n# Set Kaggle-specific paths\ninput_folder = \"/kaggle/input/faceimages/plastic face/silikon-16\"  # Change this to your Kaggle dataset directory\nbefore_folder = os.path.join(input_folder, \"before\")\nafter_folder = os.path.join(input_folder, \"after\")\n\n# Output CSV file paths (Kaggle working directory)\neyelid_before_csv = \"/kaggle/working/before_images.csv\"\neyelid_after_csv = \"/kaggle/working/after_images.csv\"\n\n# Function to process a folder of images and save pixel values to a CSV file\ndef process_images_to_csv(image_folder, output_csv):\n    data = []  # List to store flattened pixel data\n    image_names = []  # List to store image file names\n    \n    # Iterate through all images in the folder\n    for filename in os.listdir(image_folder):\n        file_path = os.path.join(image_folder, filename)\n        if os.path.isfile(file_path) and filename.endswith(('.png', '.jpg', '.jpeg')):\n            # Read the image\n            image = cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)  # Convert to grayscale\n            if image is not None:\n                # Flatten the image into a 1D array\n                flattened = image.flatten()\n                data.append(flattened)\n                image_names.append(filename)\n    \n    # Convert to a DataFrame\n    df = pd.DataFrame(data)\n    df.insert(0, \"Image_Name\", image_names)  # Add a column for image names\n    \n    # Save to CSV\n    df.to_csv(output_csv, index=False)\n    print(f\"Saved CSV to {output_csv}\")\n\n# Process both folders\nprocess_images_to_csv(before_folder, eyelid_before_csv)\nprocess_images_to_csv(after_folder, eyelid_after_csv)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-09T20:07:36.853129Z","iopub.execute_input":"2024-12-09T20:07:36.853590Z","iopub.status.idle":"2024-12-09T20:07:57.168415Z","shell.execute_reply.started":"2024-12-09T20:07:36.853553Z","shell.execute_reply":"2024-12-09T20:07:57.167422Z"}},"outputs":[{"name":"stdout","text":"Saved CSV to /kaggle/working/before_images.csv\nSaved CSV to /kaggle/working/after_images.csv\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}